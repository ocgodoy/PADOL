{"ast":null,"code":"import axios from 'axios';\nimport { UNAUTH_USER } from '../actions/types';\nimport Auth from './Auth';\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\nexport default {\n  setInterceptors: store => {\n    // Add a request interceptor\n    axios.interceptors.request.use(function (config) {\n      console.log(`REQUEST[${config.method.toUpperCase()}] ->`, config.url, config);\n      let token = Auth.getToken();\n\n      if (token) {\n        // Add auth token before request is sent\n        config.headers = Object.assign({}, config.headers, {\n          'x-auth': token\n        });\n      }\n\n      return config;\n    }); // Add a response interceptor\n\n    axios.interceptors.response.use(function (response) {\n      console.log(`<- RESPONSE[${response.status}]`, response.config.url, response);\n      return response;\n    }, function (error) {\n      console.error(`<- RESPONSE[${error.response ? error.response.status : 'UNKNOWN'}]`, error.config ? error.config.url : 'no url', error.response); // catches if the session ended!\n\n      if (error.response && error.response.data.message === 'Token has expired') {\n        localStorage.clear();\n        store.dispatch({\n          type: UNAUTH_USER\n        });\n      }\n\n      return Promise.reject(error);\n    });\n  },\n  setBaseUrl: base => {\n    axios.defaults.baseURL = base;\n  }\n};","map":{"version":3,"sources":["/Users/oceanegodoy/Documents/ENSEIRB-MATMECA/3A/PADOL/frontend/src/utils/NetworkService.js"],"names":["axios","UNAUTH_USER","Auth","defaults","headers","post","setInterceptors","store","interceptors","request","use","config","console","log","method","toUpperCase","url","token","getToken","Object","assign","response","status","error","data","message","localStorage","clear","dispatch","type","Promise","reject","setBaseUrl","base","baseURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,QAEO,kBAFP;AAGA,OAAOC,IAAP,MAAiB,QAAjB;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8C,mCAA9C;AAEA,eAAe;AACbC,EAAAA,eAAe,EAAEC,KAAK,IAAI;AACxB;AACAP,IAAAA,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAASC,MAAT,EAAiB;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUF,MAAM,CAACG,MAAP,CAAcC,WAAd,EAA4B,MAAnD,EAA0DJ,MAAM,CAACK,GAAjE,EAAsEL,MAAtE;AACA,UAAIM,KAAK,GAAGf,IAAI,CAACgB,QAAL,EAAZ;;AACA,UAAID,KAAJ,EAAW;AACT;AACAN,QAAAA,MAAM,CAACP,OAAP,GAAiBe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,MAAM,CAACP,OAAzB,EAAkC;AACjD,oBAASa;AADwC,SAAlC,CAAjB;AAID;;AACD,aAAON,MAAP;AACD,KAXD,EAFwB,CAexB;;AACAX,IAAAA,KAAK,CAACQ,YAAN,CAAmBa,QAAnB,CAA4BX,GAA5B,CAAgC,UAASW,QAAT,EAAmB;AACjDT,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAcQ,QAAQ,CAACC,MAAO,GAA3C,EAA+CD,QAAQ,CAACV,MAAT,CAAgBK,GAA/D,EAAoEK,QAApE;AACA,aAAOA,QAAP;AACD,KAHD,EAGG,UAASE,KAAT,EAAgB;AACjBX,MAAAA,OAAO,CAACW,KAAR,CAAe,eAAcA,KAAK,CAACF,QAAN,GAAiBE,KAAK,CAACF,QAAN,CAAeC,MAAhC,GAAyC,SAAU,GAAhF,EAAoFC,KAAK,CAACZ,MAAN,GAAeY,KAAK,CAACZ,MAAN,CAAaK,GAA5B,GAAkC,QAAtH,EAAgIO,KAAK,CAACF,QAAtI,EADiB,CAEjB;;AACA,UAAIE,KAAK,CAACF,QAAN,IAAmBE,KAAK,CAACF,QAAN,CAAeG,IAAf,CAAoBC,OAApB,KAAgC,mBAAvD,EAA6E;AAC3EC,QAAAA,YAAY,CAACC,KAAb;AACApB,QAAAA,KAAK,CAACqB,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAE5B;AADO,SAAf;AAGD;;AACD,aAAO6B,OAAO,CAACC,MAAR,CAAeR,KAAf,CAAP;AACD,KAbD;AAcD,GA/BY;AAiCbS,EAAAA,UAAU,EAAEC,IAAI,IAAI;AAClBjC,IAAAA,KAAK,CAACG,QAAN,CAAe+B,OAAf,GAAyBD,IAAzB;AACD;AAnCY,CAAf","sourcesContent":["import axios from 'axios'\nimport {\n  UNAUTH_USER\n} from '../actions/types'\nimport Auth from './Auth';\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\nexport default {\n  setInterceptors: store => {\n    // Add a request interceptor\n    axios.interceptors.request.use(function(config) {\n      console.log(`REQUEST[${config.method.toUpperCase()}] ->`, config.url, config)\n      let token = Auth.getToken()\n      if (token) {\n        // Add auth token before request is sent\n        config.headers = Object.assign({}, config.headers, {\n          'x-auth':token\n        })\n\n      }\n      return config\n    })\n\n    // Add a response interceptor\n    axios.interceptors.response.use(function(response) {\n      console.log(`<- RESPONSE[${response.status}]`, response.config.url, response)\n      return response\n    }, function(error) {\n      console.error(`<- RESPONSE[${error.response ? error.response.status : 'UNKNOWN'}]`, error.config ? error.config.url : 'no url', error.response)\n      // catches if the session ended!\n      if (error.response && (error.response.data.message === 'Token has expired')) {\n        localStorage.clear()\n        store.dispatch({\n          type: UNAUTH_USER\n        })\n      }\n      return Promise.reject(error)\n    })\n  },\n\n  setBaseUrl: base => {\n    axios.defaults.baseURL = base\n  }\n}\n"]},"metadata":{},"sourceType":"module"}