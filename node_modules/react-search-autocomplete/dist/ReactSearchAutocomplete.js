"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ReactSearchAutocomplete;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _defaults = require("./defaults/defaults");

var _Results = _interopRequireDefault(require("./Results/Results"));

var _StyledReactSearchAutocomplete = require("./StyledReactSearchAutocomplete");

var _SearchInput = _interopRequireDefault(require("./SearchInput/SearchInput"));

var _styledComponents = require("styled-components");

var _utils = require("./utils/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function ReactSearchAutocomplete(props) {
  var items = props.items,
      fuseOptions = props.fuseOptions,
      useCaching = props.useCaching,
      inputDebounce = props.inputDebounce,
      onSearch = props.onSearch,
      onSelect = props.onSelect,
      onFocus = props.onFocus,
      showIcon = props.showIcon,
      maxResults = props.maxResults,
      placeholder = props.placeholder,
      autoFocus = props.autoFocus,
      styling = props.styling,
      resultStringKeyName = props.resultStringKeyName;

  var theme = _objectSpread(_objectSpread({}, _defaults.defaultTheme), styling);

  var options = _objectSpread(_objectSpread({}, _defaults.defaultFuseOptions), fuseOptions);

  var _React$useState = _react["default"].useState(''),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      searchString = _React$useState2[0],
      setSearchString = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      results = _React$useState4[0],
      setResults = _React$useState4[1];

  _react["default"].useEffect(function () {
    if (useCaching) sessionStorage.clear();
  }, [items]);

  _react["default"].useEffect(function () {
    var keyword = searchString === null || searchString === void 0 ? void 0 : searchString.toLowerCase();

    if ((keyword === null || keyword === void 0 ? void 0 : keyword.length) > 0) {
      var fuse = new _fuse["default"](items, options);
      var newResults = fuse.search(searchString).map(function (result) {
        return _objectSpread({}, result.item);
      });

      if (useCaching) {
        if (keyword in sessionStorage) {
          setResults(JSON.parse(sessionStorage.getItem(keyword)));
        } else {
          sessionStorage.setItem(keyword, JSON.stringify(newResults));
          setResults(newResults);
        }
      } else {
        setResults(newResults);
      }
    } else {
      setResults([]);
    }
  }, [searchString, items, useCaching]); // This is used to debounce the onSearch props function


  var debounceOnSearch = _react["default"].useCallback(inputDebounce > 0 ? (0, _utils.debounce)(function (keyword, cached) {
    return onSearch(keyword, cached);
  }, inputDebounce) : function (keyword, cached) {
    return onSearch(keyword, cached);
  }, []);

  var handleSetSearchString = function handleSetSearchString(event) {
    setSearchString(event.target.value);
    var keyword = event.target.value.toLowerCase();

    if (useCaching) {
      onSearch && debounceOnSearch(event.target.value, (0, _utils.isCached)(keyword));
    } else {
      onSearch && debounceOnSearch(event.target.value, false);
    }
  };

  return /*#__PURE__*/_react["default"].createElement(_styledComponents.ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/_react["default"].createElement(_defaults.GlobalStyle, null), /*#__PURE__*/_react["default"].createElement(_StyledReactSearchAutocomplete.StyledReactSearchAutocomplete, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "wrapper"
  }, /*#__PURE__*/_react["default"].createElement(_SearchInput["default"], {
    searchString: searchString,
    setSearchString: handleSetSearchString,
    autoFocus: autoFocus,
    onBlur: function onBlur() {
      return setResults([]);
    },
    onFocus: onFocus,
    placeholder: placeholder,
    showIcon: showIcon
  }), /*#__PURE__*/_react["default"].createElement(_Results["default"], {
    results: results,
    onClick: onSelect,
    setSearchString: setSearchString,
    showIcon: showIcon,
    maxResults: maxResults,
    resultStringKeyName: resultStringKeyName
  }))));
}

ReactSearchAutocomplete.defaultProps = {
  items: [],
  fuseOptions: _defaults.defaultFuseOptions,
  useCaching: false,
  inputDebounce: 200,
  showIcon: true,
  maxResults: 10,
  placeholder: '',
  autoFocus: false,
  styling: {},
  resultStringKeyName: 'name'
};
ReactSearchAutocomplete.propTypes = {
  items: _propTypes["default"].array,
  fuseOptions: _propTypes["default"].object,
  useCaching: _propTypes["default"].bool,
  inputDebounce: _propTypes["default"].number,
  onSearch: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  showIcon: _propTypes["default"].bool,
  maxResults: _propTypes["default"].number,
  placeholder: _propTypes["default"].string,
  autoFocus: _propTypes["default"].bool,
  styling: _propTypes["default"].object,
  resultStringKeyName: _propTypes["default"].string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,